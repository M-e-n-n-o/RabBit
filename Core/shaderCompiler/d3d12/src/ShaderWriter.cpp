#include <atlbase.h>
#include <dxcapi.h>
#include <d3d12shader.h>
#include <vector>
#include <string>
#include <fstream>
#include "ShaderWriter.h"
#include "Utils.h"

struct ShaderBlobLookup
{
	std::wstring	name;
	uint64_t		offsetInFile;
	uint64_t		shaderBlobLength;
	uint64_t		reflectionBlobLength;
};

const wchar_t SHADER_START[] = LR"(#pragma once
#include <cstdint>
// This file is automatically generated by the shader compiler, do not modify this file yourself!

namespace RB::Graphics::D3D12
{
	static const char* SHADER_OBJ_FILE_LOCATION = "Shaders.bin";

	struct ShaderBlobLookup
	{
		uint64_t offsetInFile;
		uint64_t shaderBlobLength;
		uint64_t reflectionBlobLength;
	};

	static const uint32_t SHADER_ENTRIES = )";

ShaderWriter::ShaderWriter()
{
}

void ShaderWriter::WriteOutShaders(const std::string& defines_folder, const std::string& bin_folder, const std::vector<Shader>& shaders)
{	
	std::string bin_filename(bin_folder);
	bin_filename.append("/Shaders.bin");

	CreateDirectory(bin_folder.c_str(), NULL);

	std::ofstream bin_file;
	bin_file.open(bin_filename.c_str(), std::fstream::out | std::fstream::trunc | std::fstream::binary);
	EXIT_ON_FAIL(bin_file.is_open(), "Could not open bin directory/file");

	std::vector<ShaderBlobLookup> shader_table;
	uint64_t offset = 0;

	for (const Shader& shader : shaders)
	{
		ShaderBlobLookup entry;
		entry.name					= shader.entryName;
		entry.shaderBlobLength		= shader.shaderBlob->GetBufferSize();
		entry.reflectionBlobLength	= shader.reflection->GetBufferSize();
		entry.offsetInFile			= offset;

		shader_table.push_back(entry);
		offset += (entry.shaderBlobLength + entry.reflectionBlobLength);

		bin_file.write((char*) shader.shaderBlob->GetBufferPointer(), shader.shaderBlob->GetBufferSize());
		bin_file.write((char*) shader.reflection->GetBufferPointer(), shader.reflection->GetBufferSize());
	}

	// Close bin file
	bin_file.close();


	// Start outputting to the defines file
	std::string defines_file_name = defines_folder;
	defines_file_name.append("/codeGen");

	// Create the directory if it does not already exist
	CreateDirectory(defines_file_name.c_str(), NULL);

	defines_file_name.append("/ShaderDefines.h");

	std::ofstream defines_file(defines_file_name, std::ios::out | std::ios::trunc | std::ios::binary);

	LOG("Output location: " << defines_file_name);

	std::wstring start_output;
	start_output.append(SHADER_START);
	start_output.append(std::to_wstring(shaders.size()));
	start_output.append(L";\n\tstatic const ShaderBlobLookup SHADER_LUT[] = {");

	std::wstring end_output;

	for (int i = 0; i < shader_table.size(); i++)
	{
		const ShaderBlobLookup& entry = shader_table[i];

		start_output.append(L"{");
		start_output.append(std::to_wstring(entry.offsetInFile));
		start_output.append(L",");
		start_output.append(std::to_wstring(entry.shaderBlobLength));
		start_output.append(L",");
		start_output.append(std::to_wstring(entry.reflectionBlobLength));
		start_output.append(L"},");

		end_output.append(L"\tstatic const uint32_t ");
		end_output.append(entry.name);
		end_output.append(L" = ");
		end_output.append(std::to_wstring(i));
		end_output.append(L";\n");
	}

	start_output.append(L"};\n\n");
	end_output.append(L"}");

	std::wstring final_output;
	final_output.append(start_output);
	final_output.append(end_output);

	char* output = new char[final_output.length() + 1];
	WcharToChar(final_output.c_str(), output);

	defines_file.write(output, sizeof(char) * final_output.length());
	defines_file.close();

	delete[] output;
}
